<?phpclass BigNumber{  // *******************************************************  // Converts a given decimal number to binary  // *******************************************************    public static function Dec2Bin($value)  {    $res = $value;    $bin = "";    while(bccomp($res, 0) != 0)    {      $mod = bcmod($res, 2);      $res = bcdiv($res, 2);      $res = explode(".", $res);      $res = $res[0];      $bin = $mod.$bin;    }    return $bin;  }  // *******************************************************  // Converts a given binary number to decimal  // *******************************************************    public static function Bin2Dec($value)  {    $j = strlen($value) - 1;    $dec = "0";    for($i = 0; $i < strlen($value); $i++)    {      $char = $value[$i];      $dec = bcadd($dec, bcmul($char, bcpow("2", $j)));      $j--;    }    return $dec;  }  // *******************************************************  // Performs a bitwise and on the given numbers  // *******************************************************    public static function BitwiseAnd($left_operand, $right_operand)  {    $val1 = BigNumber::Dec2Bin($left_operand);    $val2 = BigNumber::Dec2Bin($right_operand);    $len1 = strlen($val1);    $len2 = strlen($val2);    $maxlen = max($len1, $len2);        for($i = $len1; $i < $maxlen; $i++) $val1 = "0".$val1;    for($i = $len2; $i < $maxlen; $i++) $val2 = "0".$val2;        $result = "";    for($i = 0; $i < $maxlen; $i++)    {      $char = "0";      if($val1[$i] == "1" && $val2[$i] == "1") $char = "1";      $result = $result.$char;    }        return BigNumber::Bin2Dec($result);  }  // *******************************************************  // Compares the given numbers  // *******************************************************    public static function Compare($left_operand, $right_operand)  {    return bccomp($left_operand, $right_operand);  }  // *******************************************************  // Adds the given numbers  // *******************************************************    public static function Add($left_operand, $right_operand)  {    return bcadd($left_operand, $right_operand);  }    // *******************************************************  // Subtracts the given numbers  // *******************************************************    public static function Subtract($left_operand, $right_operand)  {    return bcsub($left_operand, $right_operand);  }    // *******************************************************  // Multiplies the given numbers  // *******************************************************    public static function Multipy($left_operand, $right_operand)  {    return bcmul($left_operand, $right_operand);  }    // *******************************************************  // Divides the given numbers  // *******************************************************    public static function Divide($left_operand, $right_operand)  {    return bcdiv($left_operand, $right_operand);  }  }?>